import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color='bgrcmyk')
import addcopyfighandler


def printChosenBinInfo(eval, envId, polId):
    env = eval.envs[envId]
    pol = eval.final_policy[envId][polId]
    cBin_index = pol.ChosenBin
    cBin = pol.Bins[cBin_index]
    print(f"PRINTING INFORMATION ON THE CHOSEN BIN")
    print(f"(User Input ) Percentile: {pol.percentile} (Corresponding q* = {pol.qStar})")
    print(f"""(User Input) Confidence: {pol.confidence["bins"]}""")
    print(f"Stopping time: {pol.t}")
    print(f"Chosen Bin: {pol.getBB(cBin_index)}")
    print(f"Chosen Bin Samples: {cBin.pulls}")
    print(f"Estimated Distribution: {cBin.__str__()}")
    print(f"Confidence Intervals: {cBin.mu_l, cBin.mu_u}")
    print(f"Actual Bin Distribution: {env.arms[cBin_index].__repr__()}")


def printAllBinInfo(eval, envId, polId):
    env = eval.envs[envId]
    pol = eval.final_policy[envId][polId]
    sampled_bins = pol.Bands[0].BinSampled
    print("Printing Info for All Sampled Bins")
    for b in sampled_bins:
        Bin = pol.Bands[0].Bins[b]
        print(f"{pol.getBB(b)}| # Samples : {Bin.pulls:0>4d} | LCI: {round(Bin.mu_l,3)} | mu: {round(Bin.mu, 3)} | UCI: {round(Bin.mu_u, 3)}| True mu: {round(env.arms[b].mu,3)} ")