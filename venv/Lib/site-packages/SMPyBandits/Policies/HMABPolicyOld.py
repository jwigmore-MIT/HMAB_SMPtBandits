

try:
    from .IndexPolicy import IndexPolicy
    from .Posterior import Beta
    from .Posterior import Gauss
    from .Posterior import Gamma
    from .Posterior import NormalGamma
    from .BayesianIndexPolicy import BayesianIndexPolicy
except ImportError:
    from IndexPolicy import IndexPolicy
    from Posterior import Beta
    from Posterior import Gauss
    from Posterior import Gamma


class HMABPolicyOld(BayesianIndexPolicy):

    """Inherits from BayesianIndexPolicy
    self.nbArms = number of arms
    self.poster = posterior distribution
    self.lower = lower value (= 0) - can probably disregard
    self.amplitude = known amplitude of rewards (=1) - can probably disregard
    *args
    **kwargs used to populate posterir

    """
    def __init__(self,nbArms,
            posterior=NormalGamma,
            lower=0., amplitude=1.,
            *args, **kwargs
        ):
        super().__init__(nbArms, posterior, lower, amplitude, *args, **kwargs)
        self.isHMAB = True


    def __str__(self):
        return "Band Policy"
    

    def computeIndex(self, arm):
        #Need to sample Band, then run policy to sample bin, then update all
        return self.posterior[arm].sample() # Thomson-based sampling where Index is simply a sample, then we take max of all Indexes to choose arm