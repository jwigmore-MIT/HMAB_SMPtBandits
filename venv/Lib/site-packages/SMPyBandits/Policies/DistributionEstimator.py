

from .HMABPolicy import HMABPolicy
from .Posterior import NormalGamma
from numpy.random import normal as normalvariate
import numpy as np
from numpy.random import default_rng
rng = default_rng()

class DistributionEstimator(HMABPolicy):
    """
    Band selection is random and so is bin
    Used to test the updating the of the Posterior - Goal is not to minimize regret, but to estimate the true distribution of X_i
    """
    # def __init__(self):
    #     super(HMABPolicy1, self).__init__()

    def __init__(self, nbBands, nbBins, posterior, priorParams, verbose=True, estMethod = 1):
        super().__init__(nbBands, nbBins, posterior, priorParams)

    def choice(self, verbose = True): # This is where I finally implement the algorithm

        def chooseBand():
            return rng.integers(0, self.nbBands)

        def chooseBin(Band): # Uniformly Sample Bins
            return rng.integers(0, self.nbBins)

        Band = chooseBand()
        Bin = chooseBin(Band)
        if verbose:
            print(f"Choosing random (Band, Bin) = ({Band},{Bin})")
        return self.getArm(Band, Bin)

    def update(self):
        pass
        # Updates According to Estimation Method





