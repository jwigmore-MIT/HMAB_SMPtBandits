from SMPyBandits.Policies.HMABPolicy import HMABPolicy
from SMPyBandits.Policies.Posterior import NormalGamma
from numpy.random import normal as normalvariate
from scipy.stats import norm
import numpy as np
from numpy.random import default_rng
rng = default_rng()


class HMABSampling1(HMABPolicy):
    """
    Band selection will be thompson-like
    Bin selection is UCB1
    """

    def __init__(self, nbBands, nbBins, posterior, priorParams, verbose=True, estMethod = 3):
        super().__init__(nbBands, nbBins, posterior, priorParams)


    def choice(self):

        def chooseBand():
            samp = np.zeros(self.nbBands)
            for band in range(self.nbBands):
                # Generate Sample from current estimate of Band likelihood distribution
                samp[band] = norm.rvs(loc = self.likelihoodParams[band]["loc"], scale = self.likelihoodParams[band]["scale"])
            argmax_band = np.argmax(samp)
            if self.verbose:
                print(f"Band Distribution samples are {np.array_str(samp, precision=3)}")
                print(f"Band ({argmax_band}) chosen")
            return argmax_band



        def chooseBin(Band):
            self.computeBandArmIndex(Band)
            best_ind = np.argmax(self.indexes)
            if self.verbose:
                print("*" * 20)
                print(f"Choosing a Bin within Band ({Band})")
                # ind_formatted = (f"{ind:0.3f}" for ind in self.indexes)
                print(f"The bin indices in order are: {np.array_str(self.indexes, precision=3)}")
                print(f"""The chosen Bin is ({best_ind}) with index = {self.indexes[best_ind]}""")
            Bin = best_ind
            return Bin

        Band = chooseBand()
        Bin = chooseBin(Band)
        choice = self.getArm(Band, Bin)
        return choice

