from SMPyBandits.Policies.HMABPolicy import HMABPolicy
from SMPyBandits.Policies.Posterior import NormalGamma
from numpy.random import normal as normalvariate
from scipy.stats import norm
import numpy as np
from numpy.random import default_rng
rng = default_rng()


class HMABPercentile(HMABPolicy):

    """
    Band selection is based on the max upper bound which is based on the pth-percentile
    Bin selection is UCB1
    """

    def __init__(self, nbBands, nbBins, posterior, priorParams, verbose=True, estMethod = 3, percentile = .99):
        super().__init__(nbBands, nbBins, posterior, priorParams, verbose, estMethod)
        self.percentile = percentile

    def choice(self):

        def chooseBand():
            UCBs = np.zeros(self.nbBands)
            for band in range(self.nbBands):
                UCBs[band] = self.posteriorBand[band].getLLpercentile(self.percentile)
            argmax_band = np.argmax(UCBs)
            if self.verbose:
                print(f"Band Distribution {self.percentile}-percentiles are {np.array_str(UCBs, precision=3)}")
                print(f"Band ({argmax_band}) chosen")
            return argmax_band

        def chooseBin(Band):
            self.computeBandArmIndex(Band)
            best_ind = np.argmax(self.indexes)
            if self.verbose:
                print("*" * 20)
                print(f"Choosing a Bin within Band ({Band})")
                # ind_formatted = (f"{ind:0.3f}" for ind in self.indexes)
                print(f"The bin indices in order are: {np.array_str(self.indexes, precision=3)}")
                print(f"""The chosen Bin is ({best_ind}) with index = {self.indexes[best_ind]}""")
            Bin = best_ind
            return Bin

        Band = chooseBand()
        Bin = chooseBin(Band)
        choice = self.getArm(Band,Bin)
        return choice