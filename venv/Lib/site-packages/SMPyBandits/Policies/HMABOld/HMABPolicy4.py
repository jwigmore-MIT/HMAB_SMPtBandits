

from Policies.HMABOld.HMABBasePolicy import HMABBasePolicy
import numpy as np

class HMABPolicy4(HMABBasePolicy):
    """
    Band selection is random and so is bin
    Used to test the updating the of the Posterior - Goal is not to minimize regret, but to estimate the true distribution of X_i
    """
    # def __init__(self):
    #     super(HMABPolicy1, self).__init__()


    def choice(self, verbose = True): # This is where I finally implement the algorithm
        self.computeAllIndex()
        return np.random.choice(np.nonzero(self.index == np.max(self.index))[0])

    def computeIndex(self, arm):
        r""" Compute the current index, at time t and after :math:`N_k(t)` pulls of arm k:

        .. math:: I_k(t) = \frac{X_k(t)}{N_k(t)} + \sqrt{\frac{2 \log(t)}{N_k(t)}}.
        """
        if self.pulls[arm] < 1:
            return float('+inf')
        else:
            return (self.rewards[arm] / self.pulls[arm]) + sqrt((2 * log(self.t)) / self.pulls[arm])

    def computeAllIndex(self):
        """ Compute the current indexes for all arms, in a vectorized manner."""
        self.index = np.zeros(self.nbArms)
        indexes = (self.rewards / self.pulls) + np.sqrt((2 * np.log(self.t)) / self.pulls)
        indexes[self.pulls < 1] = float('+inf')
        self.index[:] = indexes


    def getReward(self, choice, reward, verbose = True): #Need to update posteriors now
        """ Give a reward: increase t, pulls, and update cumulated sum of rewards for that arm (normalized in [0, 1])."""

        (Band,Bin) = self.getBB(choice)
        self.t += 1
        self.updatePulls(Band, Bin)
        self.updateReward(Band, Bin, reward, lam_est= True) #update reward and expected reward for bin

        self.posteriorBand[Band].update(self.lam_estBB[Band, Bin]) # This updates the posterior
        # Now we need to update the likelihood:
        self.likelihoodParams[Band] = self.posteriorBand[Band].mean()
        if verbose:
            print(f"New likelihood for Band ({Band}): N({self.likelihoodParams[Band][0]}, {1/self.likelihoodParams[Band][1]}) ")
            print("*"*20)
            print("*" * 20)
            print(f"Updating the Posterior for Band {Band}")
            print(f"Based on Bin {Bin} sampled with received reward = {reward:0.3f}")
            print(f"Old posterior for Band ({Band}): {self.posteriorBand[Band].__str__()}")
            print(f"New posterior for Band ({Band}): {self.posteriorBand[Band].__str__()}")
            print(f"Old likelihood for Band ({Band}): N({self.likelihoodParams[Band][0]}, {1 / self.likelihoodParams[Band][1]}) ")
        test = 1